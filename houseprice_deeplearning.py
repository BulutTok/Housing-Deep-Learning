# -*- coding: utf-8 -*-
"""HousePrice AssignmentDeepLearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dl2Hw-XdcA6KvH13F5GREvXQDbGzmgLy
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/gdrive')

!ls "/content/gdrive/My Drive/Colab Notebooks"

train_data = pd.read_csv("/content/gdrive/My Drive/Colab Notebooks/train.csv")
test_data = pd.read_csv("/content/gdrive/My Drive/Colab Notebooks/test.csv")

sample = pd.read_csv("/content/gdrive/My Drive/Colab Notebooks/sample_submission.csv")

print(sample)

train_data.head()

test_data.head(100)

train_data.shape

test_data.shape

train_data.dtypes

test_data.dtypes

train_data.isnull().sum()

test_data.isnull().sum()

train_data.columns



train_data = train_data.set_index("Id")
test_data = test_data.set_index("Id")

from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

num_pipeline = Pipeline([
        ("imputer", SimpleImputer(strategy="median")),
        ("scaler", StandardScaler())
    ])

from sklearn.preprocessing import OneHotEncoder
cat_pipeline = Pipeline([
        ("imputer", SimpleImputer(strategy="most_frequent")),
        ("cat_encoder", OneHotEncoder(sparse=False)),
    ])

from sklearn.compose import ColumnTransformer

num_attribs = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond',
       'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2',
       'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',
       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',
       'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',
       'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',
       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',
       'MoSold', 'YrSold']
cat_attribs = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',
       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',
       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',
       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',
       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',
       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',
       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',
       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',
       'SaleType', 'SaleCondition']

preprocess_pipeline = ColumnTransformer([
        ("num", num_pipeline, num_attribs),
        ("cat", cat_pipeline, cat_attribs),
    ])

X_train = preprocess_pipeline.fit_transform(
    train_data[num_attribs + cat_attribs])
X_train

y_train = train_data["SalePrice"]

X_test = preprocess_pipeline.transform(test_data[num_attribs + cat_attribs])

y_test=test_data

!pip install tensorflow

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.callbacks import ModelCheckpoint

model=Sequential()
model.add(Dense(128,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(64,activation='relu'))
model.add(Dense(1,activation='linear'))
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_squared_error'])

model.fit(X_train,y_train, batch_size=5, epochs=150)

y_pred = model.predict(X_test)

result=test_data.index.values
result

df_result = pd.DataFrame(result,columns=['Id'])
df_result["SalePrice"]=y_pred
df_result

df_result.to_csv("submission_dl.csv",index=False)